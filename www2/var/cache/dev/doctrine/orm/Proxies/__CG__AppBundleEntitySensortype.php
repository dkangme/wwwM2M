<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Sensortype extends \AppBundle\Entity\Sensortype implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'description', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'standard', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'minvalue', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'maxvalue', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'measurement', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'cautionlevelformula', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'warninglevelformula', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'alertlevelformula', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'idsensortype'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'description', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'standard', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'minvalue', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'maxvalue', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'measurement', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'cautionlevelformula', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'warninglevelformula', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'alertlevelformula', '' . "\0" . 'AppBundle\\Entity\\Sensortype' . "\0" . 'idsensortype'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Sensortype $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdsensortype()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdsensortype();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdsensortype', []);

        return parent::getIdsensortype();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setStandard($standard)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStandard', [$standard]);

        return parent::setStandard($standard);
    }

    /**
     * {@inheritDoc}
     */
    public function getStandard()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStandard', []);

        return parent::getStandard();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinvalue($minvalue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinvalue', [$minvalue]);

        return parent::setMinvalue($minvalue);
    }

    /**
     * {@inheritDoc}
     */
    public function getMinvalue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinvalue', []);

        return parent::getMinvalue();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxvalue($maxvalue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxvalue', [$maxvalue]);

        return parent::setMaxvalue($maxvalue);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxvalue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxvalue', []);

        return parent::getMaxvalue();
    }

    /**
     * {@inheritDoc}
     */
    public function setMeasurement($measurement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMeasurement', [$measurement]);

        return parent::setMeasurement($measurement);
    }

    /**
     * {@inheritDoc}
     */
    public function getMeasurement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMeasurement', []);

        return parent::getMeasurement();
    }

    /**
     * {@inheritDoc}
     */
    public function setCautionlevelformula($cautionlevelformula)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCautionlevelformula', [$cautionlevelformula]);

        return parent::setCautionlevelformula($cautionlevelformula);
    }

    /**
     * {@inheritDoc}
     */
    public function getCautionlevelformula()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCautionlevelformula', []);

        return parent::getCautionlevelformula();
    }

    /**
     * {@inheritDoc}
     */
    public function setWarninglevelformula($warninglevelformula)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWarninglevelformula', [$warninglevelformula]);

        return parent::setWarninglevelformula($warninglevelformula);
    }

    /**
     * {@inheritDoc}
     */
    public function getWarninglevelformula()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWarninglevelformula', []);

        return parent::getWarninglevelformula();
    }

    /**
     * {@inheritDoc}
     */
    public function setAlertlevelformula($alertlevelformula)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAlertlevelformula', [$alertlevelformula]);

        return parent::setAlertlevelformula($alertlevelformula);
    }

    /**
     * {@inheritDoc}
     */
    public function getAlertlevelformula()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlertlevelformula', []);

        return parent::getAlertlevelformula();
    }

}
